Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> printST SEMICOLON
Rule 5     instruction -> ifST SEMICOLON
Rule 6     instruction -> declarationST SEMICOLON
Rule 7     instruction -> whileST SEMICOLON
Rule 8     instruction -> callFunc SEMICOLON
Rule 9     instruction -> declareFunc SEMICOLON
Rule 10    instruction -> returnST SEMICOLON
Rule 11    instruction -> breakST SEMICOLON
Rule 12    instruction -> continueST SEMICOLON
Rule 13    instruction -> createStruct SEMICOLON
Rule 14    instruction -> declareStructST SEMICOLON
Rule 15    instruction -> assignAccessST SEMICOLON
Rule 16    types -> INT64
Rule 17    types -> STRING
Rule 18    types -> BOOL
Rule 19    statement -> instructions
Rule 20    declareFunc -> FUNCTION ID LEPAR RIPAR COLON COLON types statement END
Rule 21    declareFunc -> FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
Rule 22    decParams -> decParams COMMA ID COLON COLON types
Rule 23    decParams -> ID COLON COLON types
Rule 24    returnST -> RETURN
Rule 25    returnST -> RETURN expression
Rule 26    declarationST -> ID EQUALS expression
Rule 27    printST -> PRINTLN LEPAR expression RIPAR
Rule 28    printST -> PRINT LEPAR expression RIPAR
Rule 29    ifST -> IF expression statement END
Rule 30    ifST -> IF expression statement ELSE statement END
Rule 31    ifST -> IF expression statement elseIfList END
Rule 32    elseIfList -> ELSEIF expression statement
Rule 33    elseIfList -> ELSEIF expression statement ELSE statement
Rule 34    elseIfList -> ELSEIF expression statement elseIfList
Rule 35    createStruct -> STRUCT ID attList END
Rule 36    attList -> attList SEMICOLON ID COLON COLON types SEMICOLON
Rule 37    attList -> ID COLON COLON types
Rule 38    declareStructST -> ID COLON COLON ID
Rule 39    assignAccessST -> ID POINT ID EQUALS expression
Rule 40    whileST -> WHILE expression statement END
Rule 41    breakST -> BREAK
Rule 42    continueST -> CONTINUE
Rule 43    callFunc -> ID LEPAR RIPAR
Rule 44    callFunc -> ID LEPAR expList RIPAR
Rule 45    expList -> expList COMMA expression
Rule 46    expList -> expression
Rule 47    expression -> MINUS expression
Rule 48    expression -> NOT expression
Rule 49    expression -> expression PLUS expression
Rule 50    expression -> expression MINUS expression
Rule 51    expression -> expression TIMES expression
Rule 52    expression -> expression DIV expression
Rule 53    expression -> expression POT expression
Rule 54    expression -> expression GREATER expression
Rule 55    expression -> expression LESS expression
Rule 56    expression -> expression GREATEREQUAL expression
Rule 57    expression -> expression LESSEQUAL expression
Rule 58    expression -> expression EQUALSEQUALS expression
Rule 59    expression -> expression DISTINT expression
Rule 60    expression -> expression OR expression
Rule 61    expression -> expression AND expression
Rule 62    expression -> finalExp
Rule 63    finalExp -> LEPAR expression RIPAR
Rule 64    finalExp -> INTLITERAL
Rule 65    finalExp -> FLOATLITERAL
Rule 66    finalExp -> STRINGLITERAL
Rule 67    finalExp -> TRUE
Rule 68    finalExp -> FALSE
Rule 69    finalExp -> ID
Rule 70    finalExp -> callFunc
Rule 71    finalExp -> accessST
Rule 72    accessST -> ID POINT ID

Terminals, with rules where they appear

AND                  : 61
BOOL                 : 18
BREAK                : 41
COLON                : 20 20 21 21 22 22 23 23 36 36 37 37 38 38
COMMA                : 22 45
CONTINUE             : 42
DISTINT              : 59
DIV                  : 52
ELSE                 : 30 33
ELSEIF               : 32 33 34
END                  : 20 21 29 30 31 35 40
EQUALS               : 26 39
EQUALSEQUALS         : 58
FALSE                : 68
FLOATLITERAL         : 65
FUNCTION             : 20 21
GREATER              : 54
GREATEREQUAL         : 56
ID                   : 20 21 22 23 26 35 36 37 38 38 39 39 43 44 69 72 72
IF                   : 29 30 31
INT64                : 16
INTLITERAL           : 64
LEPAR                : 20 21 27 28 43 44 63
LESS                 : 55
LESSEQUAL            : 57
MINUS                : 47 50
NOT                  : 48
OR                   : 60
PLUS                 : 49
POINT                : 39 72
POT                  : 53
PRINT                : 28
PRINTLN              : 27
RETURN               : 24 25
RIPAR                : 20 21 27 28 43 44 63
SEMICOLON            : 4 5 6 7 8 9 10 11 12 13 14 15 36 36
STRING               : 17
STRINGLITERAL        : 66
STRUCT               : 35
TIMES                : 51
TRUE                 : 67
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

accessST             : 71
assignAccessST       : 15
attList              : 35 36
breakST              : 11
callFunc             : 8 70
continueST           : 12
createStruct         : 13
decParams            : 21 22
declarationST        : 6
declareFunc          : 9
declareStructST      : 14
elseIfList           : 31 34
expList              : 44 45
expression           : 25 26 27 28 29 30 31 32 33 34 39 40 45 46 47 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 63
finalExp             : 62
ifST                 : 5
instruction          : 2 3
instructions         : 1 2 19
printST              : 4
returnST             : 10
start                : 0
statement            : 20 21 29 30 30 31 32 33 33 34 40
types                : 20 21 22 23 36 37
whileST              : 7

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    start                          shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 1

    (0) S' -> start .



state 2

    (1) start -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    $end            reduce using rule 1 (start -> instructions .)
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    instruction                    shift and go to state 26
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 3

    (3) instructions -> instruction .

    PRINTLN         reduce using rule 3 (instructions -> instruction .)
    PRINT           reduce using rule 3 (instructions -> instruction .)
    IF              reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    WHILE           reduce using rule 3 (instructions -> instruction .)
    FUNCTION        reduce using rule 3 (instructions -> instruction .)
    RETURN          reduce using rule 3 (instructions -> instruction .)
    BREAK           reduce using rule 3 (instructions -> instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instruction .)
    STRUCT          reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    END             reduce using rule 3 (instructions -> instruction .)
    ELSE            reduce using rule 3 (instructions -> instruction .)
    ELSEIF          reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> printST . SEMICOLON

    SEMICOLON       shift and go to state 27


state 5

    (5) instruction -> ifST . SEMICOLON

    SEMICOLON       shift and go to state 28


state 6

    (6) instruction -> declarationST . SEMICOLON

    SEMICOLON       shift and go to state 29


state 7

    (7) instruction -> whileST . SEMICOLON

    SEMICOLON       shift and go to state 30


state 8

    (8) instruction -> callFunc . SEMICOLON

    SEMICOLON       shift and go to state 31


state 9

    (9) instruction -> declareFunc . SEMICOLON

    SEMICOLON       shift and go to state 32


state 10

    (10) instruction -> returnST . SEMICOLON

    SEMICOLON       shift and go to state 33


state 11

    (11) instruction -> breakST . SEMICOLON

    SEMICOLON       shift and go to state 34


state 12

    (12) instruction -> continueST . SEMICOLON

    SEMICOLON       shift and go to state 35


state 13

    (13) instruction -> createStruct . SEMICOLON

    SEMICOLON       shift and go to state 36


state 14

    (14) instruction -> declareStructST . SEMICOLON

    SEMICOLON       shift and go to state 37


state 15

    (15) instruction -> assignAccessST . SEMICOLON

    SEMICOLON       shift and go to state 38


state 16

    (27) printST -> PRINTLN . LEPAR expression RIPAR

    LEPAR           shift and go to state 39


state 17

    (28) printST -> PRINT . LEPAR expression RIPAR

    LEPAR           shift and go to state 40


state 18

    (29) ifST -> IF . expression statement END
    (30) ifST -> IF . expression statement ELSE statement END
    (31) ifST -> IF . expression statement elseIfList END
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 41
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 19

    (26) declarationST -> ID . EQUALS expression
    (43) callFunc -> ID . LEPAR RIPAR
    (44) callFunc -> ID . LEPAR expList RIPAR
    (38) declareStructST -> ID . COLON COLON ID
    (39) assignAccessST -> ID . POINT ID EQUALS expression

    EQUALS          shift and go to state 54
    LEPAR           shift and go to state 55
    COLON           shift and go to state 56
    POINT           shift and go to state 57


state 20

    (40) whileST -> WHILE . expression statement END
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 58
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 21

    (20) declareFunc -> FUNCTION . ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> FUNCTION . ID LEPAR decParams RIPAR COLON COLON types statement END

    ID              shift and go to state 59


state 22

    (24) returnST -> RETURN .
    (25) returnST -> RETURN . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    SEMICOLON       reduce using rule 24 (returnST -> RETURN .)
    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 60
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 23

    (41) breakST -> BREAK .

    SEMICOLON       reduce using rule 41 (breakST -> BREAK .)


state 24

    (42) continueST -> CONTINUE .

    SEMICOLON       reduce using rule 42 (continueST -> CONTINUE .)


state 25

    (35) createStruct -> STRUCT . ID attList END

    ID              shift and go to state 61


state 26

    (2) instructions -> instructions instruction .

    PRINTLN         reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    FUNCTION        reduce using rule 2 (instructions -> instructions instruction .)
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    STRUCT          reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    END             reduce using rule 2 (instructions -> instructions instruction .)
    ELSE            reduce using rule 2 (instructions -> instructions instruction .)
    ELSEIF          reduce using rule 2 (instructions -> instructions instruction .)


state 27

    (4) instruction -> printST SEMICOLON .

    PRINTLN         reduce using rule 4 (instruction -> printST SEMICOLON .)
    PRINT           reduce using rule 4 (instruction -> printST SEMICOLON .)
    IF              reduce using rule 4 (instruction -> printST SEMICOLON .)
    ID              reduce using rule 4 (instruction -> printST SEMICOLON .)
    WHILE           reduce using rule 4 (instruction -> printST SEMICOLON .)
    FUNCTION        reduce using rule 4 (instruction -> printST SEMICOLON .)
    RETURN          reduce using rule 4 (instruction -> printST SEMICOLON .)
    BREAK           reduce using rule 4 (instruction -> printST SEMICOLON .)
    CONTINUE        reduce using rule 4 (instruction -> printST SEMICOLON .)
    STRUCT          reduce using rule 4 (instruction -> printST SEMICOLON .)
    $end            reduce using rule 4 (instruction -> printST SEMICOLON .)
    END             reduce using rule 4 (instruction -> printST SEMICOLON .)
    ELSE            reduce using rule 4 (instruction -> printST SEMICOLON .)
    ELSEIF          reduce using rule 4 (instruction -> printST SEMICOLON .)


state 28

    (5) instruction -> ifST SEMICOLON .

    PRINTLN         reduce using rule 5 (instruction -> ifST SEMICOLON .)
    PRINT           reduce using rule 5 (instruction -> ifST SEMICOLON .)
    IF              reduce using rule 5 (instruction -> ifST SEMICOLON .)
    ID              reduce using rule 5 (instruction -> ifST SEMICOLON .)
    WHILE           reduce using rule 5 (instruction -> ifST SEMICOLON .)
    FUNCTION        reduce using rule 5 (instruction -> ifST SEMICOLON .)
    RETURN          reduce using rule 5 (instruction -> ifST SEMICOLON .)
    BREAK           reduce using rule 5 (instruction -> ifST SEMICOLON .)
    CONTINUE        reduce using rule 5 (instruction -> ifST SEMICOLON .)
    STRUCT          reduce using rule 5 (instruction -> ifST SEMICOLON .)
    $end            reduce using rule 5 (instruction -> ifST SEMICOLON .)
    END             reduce using rule 5 (instruction -> ifST SEMICOLON .)
    ELSE            reduce using rule 5 (instruction -> ifST SEMICOLON .)
    ELSEIF          reduce using rule 5 (instruction -> ifST SEMICOLON .)


state 29

    (6) instruction -> declarationST SEMICOLON .

    PRINTLN         reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    PRINT           reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    IF              reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    ID              reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    WHILE           reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    FUNCTION        reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    RETURN          reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    BREAK           reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    CONTINUE        reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    STRUCT          reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    $end            reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    END             reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    ELSE            reduce using rule 6 (instruction -> declarationST SEMICOLON .)
    ELSEIF          reduce using rule 6 (instruction -> declarationST SEMICOLON .)


state 30

    (7) instruction -> whileST SEMICOLON .

    PRINTLN         reduce using rule 7 (instruction -> whileST SEMICOLON .)
    PRINT           reduce using rule 7 (instruction -> whileST SEMICOLON .)
    IF              reduce using rule 7 (instruction -> whileST SEMICOLON .)
    ID              reduce using rule 7 (instruction -> whileST SEMICOLON .)
    WHILE           reduce using rule 7 (instruction -> whileST SEMICOLON .)
    FUNCTION        reduce using rule 7 (instruction -> whileST SEMICOLON .)
    RETURN          reduce using rule 7 (instruction -> whileST SEMICOLON .)
    BREAK           reduce using rule 7 (instruction -> whileST SEMICOLON .)
    CONTINUE        reduce using rule 7 (instruction -> whileST SEMICOLON .)
    STRUCT          reduce using rule 7 (instruction -> whileST SEMICOLON .)
    $end            reduce using rule 7 (instruction -> whileST SEMICOLON .)
    END             reduce using rule 7 (instruction -> whileST SEMICOLON .)
    ELSE            reduce using rule 7 (instruction -> whileST SEMICOLON .)
    ELSEIF          reduce using rule 7 (instruction -> whileST SEMICOLON .)


state 31

    (8) instruction -> callFunc SEMICOLON .

    PRINTLN         reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    PRINT           reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    IF              reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    ID              reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    WHILE           reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    FUNCTION        reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    RETURN          reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    BREAK           reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    CONTINUE        reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    STRUCT          reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    $end            reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    END             reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    ELSE            reduce using rule 8 (instruction -> callFunc SEMICOLON .)
    ELSEIF          reduce using rule 8 (instruction -> callFunc SEMICOLON .)


state 32

    (9) instruction -> declareFunc SEMICOLON .

    PRINTLN         reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    PRINT           reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    IF              reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    ID              reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    WHILE           reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    FUNCTION        reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    RETURN          reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    BREAK           reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    CONTINUE        reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    STRUCT          reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    $end            reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    END             reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    ELSE            reduce using rule 9 (instruction -> declareFunc SEMICOLON .)
    ELSEIF          reduce using rule 9 (instruction -> declareFunc SEMICOLON .)


state 33

    (10) instruction -> returnST SEMICOLON .

    PRINTLN         reduce using rule 10 (instruction -> returnST SEMICOLON .)
    PRINT           reduce using rule 10 (instruction -> returnST SEMICOLON .)
    IF              reduce using rule 10 (instruction -> returnST SEMICOLON .)
    ID              reduce using rule 10 (instruction -> returnST SEMICOLON .)
    WHILE           reduce using rule 10 (instruction -> returnST SEMICOLON .)
    FUNCTION        reduce using rule 10 (instruction -> returnST SEMICOLON .)
    RETURN          reduce using rule 10 (instruction -> returnST SEMICOLON .)
    BREAK           reduce using rule 10 (instruction -> returnST SEMICOLON .)
    CONTINUE        reduce using rule 10 (instruction -> returnST SEMICOLON .)
    STRUCT          reduce using rule 10 (instruction -> returnST SEMICOLON .)
    $end            reduce using rule 10 (instruction -> returnST SEMICOLON .)
    END             reduce using rule 10 (instruction -> returnST SEMICOLON .)
    ELSE            reduce using rule 10 (instruction -> returnST SEMICOLON .)
    ELSEIF          reduce using rule 10 (instruction -> returnST SEMICOLON .)


state 34

    (11) instruction -> breakST SEMICOLON .

    PRINTLN         reduce using rule 11 (instruction -> breakST SEMICOLON .)
    PRINT           reduce using rule 11 (instruction -> breakST SEMICOLON .)
    IF              reduce using rule 11 (instruction -> breakST SEMICOLON .)
    ID              reduce using rule 11 (instruction -> breakST SEMICOLON .)
    WHILE           reduce using rule 11 (instruction -> breakST SEMICOLON .)
    FUNCTION        reduce using rule 11 (instruction -> breakST SEMICOLON .)
    RETURN          reduce using rule 11 (instruction -> breakST SEMICOLON .)
    BREAK           reduce using rule 11 (instruction -> breakST SEMICOLON .)
    CONTINUE        reduce using rule 11 (instruction -> breakST SEMICOLON .)
    STRUCT          reduce using rule 11 (instruction -> breakST SEMICOLON .)
    $end            reduce using rule 11 (instruction -> breakST SEMICOLON .)
    END             reduce using rule 11 (instruction -> breakST SEMICOLON .)
    ELSE            reduce using rule 11 (instruction -> breakST SEMICOLON .)
    ELSEIF          reduce using rule 11 (instruction -> breakST SEMICOLON .)


state 35

    (12) instruction -> continueST SEMICOLON .

    PRINTLN         reduce using rule 12 (instruction -> continueST SEMICOLON .)
    PRINT           reduce using rule 12 (instruction -> continueST SEMICOLON .)
    IF              reduce using rule 12 (instruction -> continueST SEMICOLON .)
    ID              reduce using rule 12 (instruction -> continueST SEMICOLON .)
    WHILE           reduce using rule 12 (instruction -> continueST SEMICOLON .)
    FUNCTION        reduce using rule 12 (instruction -> continueST SEMICOLON .)
    RETURN          reduce using rule 12 (instruction -> continueST SEMICOLON .)
    BREAK           reduce using rule 12 (instruction -> continueST SEMICOLON .)
    CONTINUE        reduce using rule 12 (instruction -> continueST SEMICOLON .)
    STRUCT          reduce using rule 12 (instruction -> continueST SEMICOLON .)
    $end            reduce using rule 12 (instruction -> continueST SEMICOLON .)
    END             reduce using rule 12 (instruction -> continueST SEMICOLON .)
    ELSE            reduce using rule 12 (instruction -> continueST SEMICOLON .)
    ELSEIF          reduce using rule 12 (instruction -> continueST SEMICOLON .)


state 36

    (13) instruction -> createStruct SEMICOLON .

    PRINTLN         reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    PRINT           reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    IF              reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    ID              reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    WHILE           reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    FUNCTION        reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    RETURN          reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    BREAK           reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    CONTINUE        reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    STRUCT          reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    $end            reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    END             reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    ELSE            reduce using rule 13 (instruction -> createStruct SEMICOLON .)
    ELSEIF          reduce using rule 13 (instruction -> createStruct SEMICOLON .)


state 37

    (14) instruction -> declareStructST SEMICOLON .

    PRINTLN         reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    PRINT           reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    IF              reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    ID              reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    WHILE           reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    FUNCTION        reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    RETURN          reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    BREAK           reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    CONTINUE        reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    STRUCT          reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    $end            reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    END             reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    ELSE            reduce using rule 14 (instruction -> declareStructST SEMICOLON .)
    ELSEIF          reduce using rule 14 (instruction -> declareStructST SEMICOLON .)


state 38

    (15) instruction -> assignAccessST SEMICOLON .

    PRINTLN         reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    PRINT           reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    IF              reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    ID              reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    WHILE           reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    FUNCTION        reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    RETURN          reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    BREAK           reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    CONTINUE        reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    STRUCT          reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    $end            reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    END             reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    ELSE            reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)
    ELSEIF          reduce using rule 15 (instruction -> assignAccessST SEMICOLON .)


state 39

    (27) printST -> PRINTLN LEPAR . expression RIPAR
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 62
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 40

    (28) printST -> PRINT LEPAR . expression RIPAR
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 63
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 41

    (29) ifST -> IF expression . statement END
    (30) ifST -> IF expression . statement ELSE statement END
    (31) ifST -> IF expression . statement elseIfList END
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression
    (19) statement -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    statement                      shift and go to state 64
    instructions                   shift and go to state 78
    instruction                    shift and go to state 3
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 42

    (47) expression -> MINUS . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 79
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 43

    (48) expression -> NOT . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 80
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 44

    (62) expression -> finalExp .

    PLUS            reduce using rule 62 (expression -> finalExp .)
    MINUS           reduce using rule 62 (expression -> finalExp .)
    TIMES           reduce using rule 62 (expression -> finalExp .)
    DIV             reduce using rule 62 (expression -> finalExp .)
    POT             reduce using rule 62 (expression -> finalExp .)
    GREATER         reduce using rule 62 (expression -> finalExp .)
    LESS            reduce using rule 62 (expression -> finalExp .)
    GREATEREQUAL    reduce using rule 62 (expression -> finalExp .)
    LESSEQUAL       reduce using rule 62 (expression -> finalExp .)
    EQUALSEQUALS    reduce using rule 62 (expression -> finalExp .)
    DISTINT         reduce using rule 62 (expression -> finalExp .)
    OR              reduce using rule 62 (expression -> finalExp .)
    AND             reduce using rule 62 (expression -> finalExp .)
    PRINTLN         reduce using rule 62 (expression -> finalExp .)
    PRINT           reduce using rule 62 (expression -> finalExp .)
    IF              reduce using rule 62 (expression -> finalExp .)
    ID              reduce using rule 62 (expression -> finalExp .)
    WHILE           reduce using rule 62 (expression -> finalExp .)
    FUNCTION        reduce using rule 62 (expression -> finalExp .)
    RETURN          reduce using rule 62 (expression -> finalExp .)
    BREAK           reduce using rule 62 (expression -> finalExp .)
    CONTINUE        reduce using rule 62 (expression -> finalExp .)
    STRUCT          reduce using rule 62 (expression -> finalExp .)
    SEMICOLON       reduce using rule 62 (expression -> finalExp .)
    RIPAR           reduce using rule 62 (expression -> finalExp .)
    COMMA           reduce using rule 62 (expression -> finalExp .)


state 45

    (63) finalExp -> LEPAR . expression RIPAR
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 81
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 46

    (64) finalExp -> INTLITERAL .

    PLUS            reduce using rule 64 (finalExp -> INTLITERAL .)
    MINUS           reduce using rule 64 (finalExp -> INTLITERAL .)
    TIMES           reduce using rule 64 (finalExp -> INTLITERAL .)
    DIV             reduce using rule 64 (finalExp -> INTLITERAL .)
    POT             reduce using rule 64 (finalExp -> INTLITERAL .)
    GREATER         reduce using rule 64 (finalExp -> INTLITERAL .)
    LESS            reduce using rule 64 (finalExp -> INTLITERAL .)
    GREATEREQUAL    reduce using rule 64 (finalExp -> INTLITERAL .)
    LESSEQUAL       reduce using rule 64 (finalExp -> INTLITERAL .)
    EQUALSEQUALS    reduce using rule 64 (finalExp -> INTLITERAL .)
    DISTINT         reduce using rule 64 (finalExp -> INTLITERAL .)
    OR              reduce using rule 64 (finalExp -> INTLITERAL .)
    AND             reduce using rule 64 (finalExp -> INTLITERAL .)
    PRINTLN         reduce using rule 64 (finalExp -> INTLITERAL .)
    PRINT           reduce using rule 64 (finalExp -> INTLITERAL .)
    IF              reduce using rule 64 (finalExp -> INTLITERAL .)
    ID              reduce using rule 64 (finalExp -> INTLITERAL .)
    WHILE           reduce using rule 64 (finalExp -> INTLITERAL .)
    FUNCTION        reduce using rule 64 (finalExp -> INTLITERAL .)
    RETURN          reduce using rule 64 (finalExp -> INTLITERAL .)
    BREAK           reduce using rule 64 (finalExp -> INTLITERAL .)
    CONTINUE        reduce using rule 64 (finalExp -> INTLITERAL .)
    STRUCT          reduce using rule 64 (finalExp -> INTLITERAL .)
    SEMICOLON       reduce using rule 64 (finalExp -> INTLITERAL .)
    RIPAR           reduce using rule 64 (finalExp -> INTLITERAL .)
    COMMA           reduce using rule 64 (finalExp -> INTLITERAL .)


state 47

    (65) finalExp -> FLOATLITERAL .

    PLUS            reduce using rule 65 (finalExp -> FLOATLITERAL .)
    MINUS           reduce using rule 65 (finalExp -> FLOATLITERAL .)
    TIMES           reduce using rule 65 (finalExp -> FLOATLITERAL .)
    DIV             reduce using rule 65 (finalExp -> FLOATLITERAL .)
    POT             reduce using rule 65 (finalExp -> FLOATLITERAL .)
    GREATER         reduce using rule 65 (finalExp -> FLOATLITERAL .)
    LESS            reduce using rule 65 (finalExp -> FLOATLITERAL .)
    GREATEREQUAL    reduce using rule 65 (finalExp -> FLOATLITERAL .)
    LESSEQUAL       reduce using rule 65 (finalExp -> FLOATLITERAL .)
    EQUALSEQUALS    reduce using rule 65 (finalExp -> FLOATLITERAL .)
    DISTINT         reduce using rule 65 (finalExp -> FLOATLITERAL .)
    OR              reduce using rule 65 (finalExp -> FLOATLITERAL .)
    AND             reduce using rule 65 (finalExp -> FLOATLITERAL .)
    PRINTLN         reduce using rule 65 (finalExp -> FLOATLITERAL .)
    PRINT           reduce using rule 65 (finalExp -> FLOATLITERAL .)
    IF              reduce using rule 65 (finalExp -> FLOATLITERAL .)
    ID              reduce using rule 65 (finalExp -> FLOATLITERAL .)
    WHILE           reduce using rule 65 (finalExp -> FLOATLITERAL .)
    FUNCTION        reduce using rule 65 (finalExp -> FLOATLITERAL .)
    RETURN          reduce using rule 65 (finalExp -> FLOATLITERAL .)
    BREAK           reduce using rule 65 (finalExp -> FLOATLITERAL .)
    CONTINUE        reduce using rule 65 (finalExp -> FLOATLITERAL .)
    STRUCT          reduce using rule 65 (finalExp -> FLOATLITERAL .)
    SEMICOLON       reduce using rule 65 (finalExp -> FLOATLITERAL .)
    RIPAR           reduce using rule 65 (finalExp -> FLOATLITERAL .)
    COMMA           reduce using rule 65 (finalExp -> FLOATLITERAL .)


state 48

    (66) finalExp -> STRINGLITERAL .

    PLUS            reduce using rule 66 (finalExp -> STRINGLITERAL .)
    MINUS           reduce using rule 66 (finalExp -> STRINGLITERAL .)
    TIMES           reduce using rule 66 (finalExp -> STRINGLITERAL .)
    DIV             reduce using rule 66 (finalExp -> STRINGLITERAL .)
    POT             reduce using rule 66 (finalExp -> STRINGLITERAL .)
    GREATER         reduce using rule 66 (finalExp -> STRINGLITERAL .)
    LESS            reduce using rule 66 (finalExp -> STRINGLITERAL .)
    GREATEREQUAL    reduce using rule 66 (finalExp -> STRINGLITERAL .)
    LESSEQUAL       reduce using rule 66 (finalExp -> STRINGLITERAL .)
    EQUALSEQUALS    reduce using rule 66 (finalExp -> STRINGLITERAL .)
    DISTINT         reduce using rule 66 (finalExp -> STRINGLITERAL .)
    OR              reduce using rule 66 (finalExp -> STRINGLITERAL .)
    AND             reduce using rule 66 (finalExp -> STRINGLITERAL .)
    PRINTLN         reduce using rule 66 (finalExp -> STRINGLITERAL .)
    PRINT           reduce using rule 66 (finalExp -> STRINGLITERAL .)
    IF              reduce using rule 66 (finalExp -> STRINGLITERAL .)
    ID              reduce using rule 66 (finalExp -> STRINGLITERAL .)
    WHILE           reduce using rule 66 (finalExp -> STRINGLITERAL .)
    FUNCTION        reduce using rule 66 (finalExp -> STRINGLITERAL .)
    RETURN          reduce using rule 66 (finalExp -> STRINGLITERAL .)
    BREAK           reduce using rule 66 (finalExp -> STRINGLITERAL .)
    CONTINUE        reduce using rule 66 (finalExp -> STRINGLITERAL .)
    STRUCT          reduce using rule 66 (finalExp -> STRINGLITERAL .)
    SEMICOLON       reduce using rule 66 (finalExp -> STRINGLITERAL .)
    RIPAR           reduce using rule 66 (finalExp -> STRINGLITERAL .)
    COMMA           reduce using rule 66 (finalExp -> STRINGLITERAL .)


state 49

    (67) finalExp -> TRUE .

    PLUS            reduce using rule 67 (finalExp -> TRUE .)
    MINUS           reduce using rule 67 (finalExp -> TRUE .)
    TIMES           reduce using rule 67 (finalExp -> TRUE .)
    DIV             reduce using rule 67 (finalExp -> TRUE .)
    POT             reduce using rule 67 (finalExp -> TRUE .)
    GREATER         reduce using rule 67 (finalExp -> TRUE .)
    LESS            reduce using rule 67 (finalExp -> TRUE .)
    GREATEREQUAL    reduce using rule 67 (finalExp -> TRUE .)
    LESSEQUAL       reduce using rule 67 (finalExp -> TRUE .)
    EQUALSEQUALS    reduce using rule 67 (finalExp -> TRUE .)
    DISTINT         reduce using rule 67 (finalExp -> TRUE .)
    OR              reduce using rule 67 (finalExp -> TRUE .)
    AND             reduce using rule 67 (finalExp -> TRUE .)
    PRINTLN         reduce using rule 67 (finalExp -> TRUE .)
    PRINT           reduce using rule 67 (finalExp -> TRUE .)
    IF              reduce using rule 67 (finalExp -> TRUE .)
    ID              reduce using rule 67 (finalExp -> TRUE .)
    WHILE           reduce using rule 67 (finalExp -> TRUE .)
    FUNCTION        reduce using rule 67 (finalExp -> TRUE .)
    RETURN          reduce using rule 67 (finalExp -> TRUE .)
    BREAK           reduce using rule 67 (finalExp -> TRUE .)
    CONTINUE        reduce using rule 67 (finalExp -> TRUE .)
    STRUCT          reduce using rule 67 (finalExp -> TRUE .)
    SEMICOLON       reduce using rule 67 (finalExp -> TRUE .)
    RIPAR           reduce using rule 67 (finalExp -> TRUE .)
    COMMA           reduce using rule 67 (finalExp -> TRUE .)


state 50

    (68) finalExp -> FALSE .

    PLUS            reduce using rule 68 (finalExp -> FALSE .)
    MINUS           reduce using rule 68 (finalExp -> FALSE .)
    TIMES           reduce using rule 68 (finalExp -> FALSE .)
    DIV             reduce using rule 68 (finalExp -> FALSE .)
    POT             reduce using rule 68 (finalExp -> FALSE .)
    GREATER         reduce using rule 68 (finalExp -> FALSE .)
    LESS            reduce using rule 68 (finalExp -> FALSE .)
    GREATEREQUAL    reduce using rule 68 (finalExp -> FALSE .)
    LESSEQUAL       reduce using rule 68 (finalExp -> FALSE .)
    EQUALSEQUALS    reduce using rule 68 (finalExp -> FALSE .)
    DISTINT         reduce using rule 68 (finalExp -> FALSE .)
    OR              reduce using rule 68 (finalExp -> FALSE .)
    AND             reduce using rule 68 (finalExp -> FALSE .)
    PRINTLN         reduce using rule 68 (finalExp -> FALSE .)
    PRINT           reduce using rule 68 (finalExp -> FALSE .)
    IF              reduce using rule 68 (finalExp -> FALSE .)
    ID              reduce using rule 68 (finalExp -> FALSE .)
    WHILE           reduce using rule 68 (finalExp -> FALSE .)
    FUNCTION        reduce using rule 68 (finalExp -> FALSE .)
    RETURN          reduce using rule 68 (finalExp -> FALSE .)
    BREAK           reduce using rule 68 (finalExp -> FALSE .)
    CONTINUE        reduce using rule 68 (finalExp -> FALSE .)
    STRUCT          reduce using rule 68 (finalExp -> FALSE .)
    SEMICOLON       reduce using rule 68 (finalExp -> FALSE .)
    RIPAR           reduce using rule 68 (finalExp -> FALSE .)
    COMMA           reduce using rule 68 (finalExp -> FALSE .)


state 51

    (69) finalExp -> ID .
    (43) callFunc -> ID . LEPAR RIPAR
    (44) callFunc -> ID . LEPAR expList RIPAR
    (72) accessST -> ID . POINT ID

    PLUS            reduce using rule 69 (finalExp -> ID .)
    MINUS           reduce using rule 69 (finalExp -> ID .)
    TIMES           reduce using rule 69 (finalExp -> ID .)
    DIV             reduce using rule 69 (finalExp -> ID .)
    POT             reduce using rule 69 (finalExp -> ID .)
    GREATER         reduce using rule 69 (finalExp -> ID .)
    LESS            reduce using rule 69 (finalExp -> ID .)
    GREATEREQUAL    reduce using rule 69 (finalExp -> ID .)
    LESSEQUAL       reduce using rule 69 (finalExp -> ID .)
    EQUALSEQUALS    reduce using rule 69 (finalExp -> ID .)
    DISTINT         reduce using rule 69 (finalExp -> ID .)
    OR              reduce using rule 69 (finalExp -> ID .)
    AND             reduce using rule 69 (finalExp -> ID .)
    PRINTLN         reduce using rule 69 (finalExp -> ID .)
    PRINT           reduce using rule 69 (finalExp -> ID .)
    IF              reduce using rule 69 (finalExp -> ID .)
    ID              reduce using rule 69 (finalExp -> ID .)
    WHILE           reduce using rule 69 (finalExp -> ID .)
    FUNCTION        reduce using rule 69 (finalExp -> ID .)
    RETURN          reduce using rule 69 (finalExp -> ID .)
    BREAK           reduce using rule 69 (finalExp -> ID .)
    CONTINUE        reduce using rule 69 (finalExp -> ID .)
    STRUCT          reduce using rule 69 (finalExp -> ID .)
    SEMICOLON       reduce using rule 69 (finalExp -> ID .)
    RIPAR           reduce using rule 69 (finalExp -> ID .)
    COMMA           reduce using rule 69 (finalExp -> ID .)
    LEPAR           shift and go to state 55
    POINT           shift and go to state 82


state 52

    (70) finalExp -> callFunc .

    PLUS            reduce using rule 70 (finalExp -> callFunc .)
    MINUS           reduce using rule 70 (finalExp -> callFunc .)
    TIMES           reduce using rule 70 (finalExp -> callFunc .)
    DIV             reduce using rule 70 (finalExp -> callFunc .)
    POT             reduce using rule 70 (finalExp -> callFunc .)
    GREATER         reduce using rule 70 (finalExp -> callFunc .)
    LESS            reduce using rule 70 (finalExp -> callFunc .)
    GREATEREQUAL    reduce using rule 70 (finalExp -> callFunc .)
    LESSEQUAL       reduce using rule 70 (finalExp -> callFunc .)
    EQUALSEQUALS    reduce using rule 70 (finalExp -> callFunc .)
    DISTINT         reduce using rule 70 (finalExp -> callFunc .)
    OR              reduce using rule 70 (finalExp -> callFunc .)
    AND             reduce using rule 70 (finalExp -> callFunc .)
    PRINTLN         reduce using rule 70 (finalExp -> callFunc .)
    PRINT           reduce using rule 70 (finalExp -> callFunc .)
    IF              reduce using rule 70 (finalExp -> callFunc .)
    ID              reduce using rule 70 (finalExp -> callFunc .)
    WHILE           reduce using rule 70 (finalExp -> callFunc .)
    FUNCTION        reduce using rule 70 (finalExp -> callFunc .)
    RETURN          reduce using rule 70 (finalExp -> callFunc .)
    BREAK           reduce using rule 70 (finalExp -> callFunc .)
    CONTINUE        reduce using rule 70 (finalExp -> callFunc .)
    STRUCT          reduce using rule 70 (finalExp -> callFunc .)
    SEMICOLON       reduce using rule 70 (finalExp -> callFunc .)
    RIPAR           reduce using rule 70 (finalExp -> callFunc .)
    COMMA           reduce using rule 70 (finalExp -> callFunc .)


state 53

    (71) finalExp -> accessST .

    PLUS            reduce using rule 71 (finalExp -> accessST .)
    MINUS           reduce using rule 71 (finalExp -> accessST .)
    TIMES           reduce using rule 71 (finalExp -> accessST .)
    DIV             reduce using rule 71 (finalExp -> accessST .)
    POT             reduce using rule 71 (finalExp -> accessST .)
    GREATER         reduce using rule 71 (finalExp -> accessST .)
    LESS            reduce using rule 71 (finalExp -> accessST .)
    GREATEREQUAL    reduce using rule 71 (finalExp -> accessST .)
    LESSEQUAL       reduce using rule 71 (finalExp -> accessST .)
    EQUALSEQUALS    reduce using rule 71 (finalExp -> accessST .)
    DISTINT         reduce using rule 71 (finalExp -> accessST .)
    OR              reduce using rule 71 (finalExp -> accessST .)
    AND             reduce using rule 71 (finalExp -> accessST .)
    PRINTLN         reduce using rule 71 (finalExp -> accessST .)
    PRINT           reduce using rule 71 (finalExp -> accessST .)
    IF              reduce using rule 71 (finalExp -> accessST .)
    ID              reduce using rule 71 (finalExp -> accessST .)
    WHILE           reduce using rule 71 (finalExp -> accessST .)
    FUNCTION        reduce using rule 71 (finalExp -> accessST .)
    RETURN          reduce using rule 71 (finalExp -> accessST .)
    BREAK           reduce using rule 71 (finalExp -> accessST .)
    CONTINUE        reduce using rule 71 (finalExp -> accessST .)
    STRUCT          reduce using rule 71 (finalExp -> accessST .)
    SEMICOLON       reduce using rule 71 (finalExp -> accessST .)
    RIPAR           reduce using rule 71 (finalExp -> accessST .)
    COMMA           reduce using rule 71 (finalExp -> accessST .)


state 54

    (26) declarationST -> ID EQUALS . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 83
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 55

    (43) callFunc -> ID LEPAR . RIPAR
    (44) callFunc -> ID LEPAR . expList RIPAR
    (45) expList -> . expList COMMA expression
    (46) expList -> . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    RIPAR           shift and go to state 84
    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expList                        shift and go to state 85
    expression                     shift and go to state 86
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 56

    (38) declareStructST -> ID COLON . COLON ID

    COLON           shift and go to state 87


state 57

    (39) assignAccessST -> ID POINT . ID EQUALS expression

    ID              shift and go to state 88


state 58

    (40) whileST -> WHILE expression . statement END
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression
    (19) statement -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    statement                      shift and go to state 89
    instructions                   shift and go to state 78
    instruction                    shift and go to state 3
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 59

    (20) declareFunc -> FUNCTION ID . LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> FUNCTION ID . LEPAR decParams RIPAR COLON COLON types statement END

    LEPAR           shift and go to state 90


state 60

    (25) returnST -> RETURN expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    SEMICOLON       reduce using rule 25 (returnST -> RETURN expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77


state 61

    (35) createStruct -> STRUCT ID . attList END
    (36) attList -> . attList SEMICOLON ID COLON COLON types SEMICOLON
    (37) attList -> . ID COLON COLON types

    ID              shift and go to state 91

    attList                        shift and go to state 92

state 62

    (27) printST -> PRINTLN LEPAR expression . RIPAR
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    RIPAR           shift and go to state 93
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77


state 63

    (28) printST -> PRINT LEPAR expression . RIPAR
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    RIPAR           shift and go to state 94
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77


state 64

    (29) ifST -> IF expression statement . END
    (30) ifST -> IF expression statement . ELSE statement END
    (31) ifST -> IF expression statement . elseIfList END
    (32) elseIfList -> . ELSEIF expression statement
    (33) elseIfList -> . ELSEIF expression statement ELSE statement
    (34) elseIfList -> . ELSEIF expression statement elseIfList

    END             shift and go to state 95
    ELSE            shift and go to state 96
    ELSEIF          shift and go to state 98

    elseIfList                     shift and go to state 97

state 65

    (49) expression -> expression PLUS . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 99
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 66

    (50) expression -> expression MINUS . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 100
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 67

    (51) expression -> expression TIMES . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 101
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 68

    (52) expression -> expression DIV . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 102
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 69

    (53) expression -> expression POT . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 103
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 70

    (54) expression -> expression GREATER . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 104
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 71

    (55) expression -> expression LESS . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 105
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 72

    (56) expression -> expression GREATEREQUAL . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 106
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 73

    (57) expression -> expression LESSEQUAL . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 107
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 74

    (58) expression -> expression EQUALSEQUALS . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 108
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 75

    (59) expression -> expression DISTINT . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 109
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 76

    (60) expression -> expression OR . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 110
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 77

    (61) expression -> expression AND . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 111
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 78

    (19) statement -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    END             reduce using rule 19 (statement -> instructions .)
    ELSE            reduce using rule 19 (statement -> instructions .)
    ELSEIF          reduce using rule 19 (statement -> instructions .)
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    instruction                    shift and go to state 26
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 79

    (47) expression -> MINUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    PLUS            reduce using rule 47 (expression -> MINUS expression .)
    MINUS           reduce using rule 47 (expression -> MINUS expression .)
    TIMES           reduce using rule 47 (expression -> MINUS expression .)
    DIV             reduce using rule 47 (expression -> MINUS expression .)
    POT             reduce using rule 47 (expression -> MINUS expression .)
    GREATER         reduce using rule 47 (expression -> MINUS expression .)
    LESS            reduce using rule 47 (expression -> MINUS expression .)
    GREATEREQUAL    reduce using rule 47 (expression -> MINUS expression .)
    LESSEQUAL       reduce using rule 47 (expression -> MINUS expression .)
    EQUALSEQUALS    reduce using rule 47 (expression -> MINUS expression .)
    DISTINT         reduce using rule 47 (expression -> MINUS expression .)
    OR              reduce using rule 47 (expression -> MINUS expression .)
    AND             reduce using rule 47 (expression -> MINUS expression .)
    PRINTLN         reduce using rule 47 (expression -> MINUS expression .)
    PRINT           reduce using rule 47 (expression -> MINUS expression .)
    IF              reduce using rule 47 (expression -> MINUS expression .)
    ID              reduce using rule 47 (expression -> MINUS expression .)
    WHILE           reduce using rule 47 (expression -> MINUS expression .)
    FUNCTION        reduce using rule 47 (expression -> MINUS expression .)
    RETURN          reduce using rule 47 (expression -> MINUS expression .)
    BREAK           reduce using rule 47 (expression -> MINUS expression .)
    CONTINUE        reduce using rule 47 (expression -> MINUS expression .)
    STRUCT          reduce using rule 47 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 47 (expression -> MINUS expression .)
    RIPAR           reduce using rule 47 (expression -> MINUS expression .)
    COMMA           reduce using rule 47 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 80

    (48) expression -> NOT expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    PLUS            reduce using rule 48 (expression -> NOT expression .)
    MINUS           reduce using rule 48 (expression -> NOT expression .)
    TIMES           reduce using rule 48 (expression -> NOT expression .)
    DIV             reduce using rule 48 (expression -> NOT expression .)
    POT             reduce using rule 48 (expression -> NOT expression .)
    GREATER         reduce using rule 48 (expression -> NOT expression .)
    LESS            reduce using rule 48 (expression -> NOT expression .)
    GREATEREQUAL    reduce using rule 48 (expression -> NOT expression .)
    LESSEQUAL       reduce using rule 48 (expression -> NOT expression .)
    EQUALSEQUALS    reduce using rule 48 (expression -> NOT expression .)
    DISTINT         reduce using rule 48 (expression -> NOT expression .)
    OR              reduce using rule 48 (expression -> NOT expression .)
    AND             reduce using rule 48 (expression -> NOT expression .)
    PRINTLN         reduce using rule 48 (expression -> NOT expression .)
    PRINT           reduce using rule 48 (expression -> NOT expression .)
    IF              reduce using rule 48 (expression -> NOT expression .)
    ID              reduce using rule 48 (expression -> NOT expression .)
    WHILE           reduce using rule 48 (expression -> NOT expression .)
    FUNCTION        reduce using rule 48 (expression -> NOT expression .)
    RETURN          reduce using rule 48 (expression -> NOT expression .)
    BREAK           reduce using rule 48 (expression -> NOT expression .)
    CONTINUE        reduce using rule 48 (expression -> NOT expression .)
    STRUCT          reduce using rule 48 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 48 (expression -> NOT expression .)
    RIPAR           reduce using rule 48 (expression -> NOT expression .)
    COMMA           reduce using rule 48 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 81

    (63) finalExp -> LEPAR expression . RIPAR
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    RIPAR           shift and go to state 112
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77


state 82

    (72) accessST -> ID POINT . ID

    ID              shift and go to state 113


state 83

    (26) declarationST -> ID EQUALS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    SEMICOLON       reduce using rule 26 (declarationST -> ID EQUALS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77


state 84

    (43) callFunc -> ID LEPAR RIPAR .

    SEMICOLON       reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    PLUS            reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    MINUS           reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    TIMES           reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    DIV             reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    POT             reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    GREATER         reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    LESS            reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    GREATEREQUAL    reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    LESSEQUAL       reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    EQUALSEQUALS    reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    DISTINT         reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    OR              reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    AND             reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    PRINTLN         reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    PRINT           reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    IF              reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    ID              reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    WHILE           reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    FUNCTION        reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    RETURN          reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    BREAK           reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    CONTINUE        reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    STRUCT          reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    RIPAR           reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)
    COMMA           reduce using rule 43 (callFunc -> ID LEPAR RIPAR .)


state 85

    (44) callFunc -> ID LEPAR expList . RIPAR
    (45) expList -> expList . COMMA expression

    RIPAR           shift and go to state 114
    COMMA           shift and go to state 115


state 86

    (46) expList -> expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    RIPAR           reduce using rule 46 (expList -> expression .)
    COMMA           reduce using rule 46 (expList -> expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77


state 87

    (38) declareStructST -> ID COLON COLON . ID

    ID              shift and go to state 116


state 88

    (39) assignAccessST -> ID POINT ID . EQUALS expression

    EQUALS          shift and go to state 117


state 89

    (40) whileST -> WHILE expression statement . END

    END             shift and go to state 118


state 90

    (20) declareFunc -> FUNCTION ID LEPAR . RIPAR COLON COLON types statement END
    (21) declareFunc -> FUNCTION ID LEPAR . decParams RIPAR COLON COLON types statement END
    (22) decParams -> . decParams COMMA ID COLON COLON types
    (23) decParams -> . ID COLON COLON types

    RIPAR           shift and go to state 120
    ID              shift and go to state 119

    decParams                      shift and go to state 121

state 91

    (37) attList -> ID . COLON COLON types

    COLON           shift and go to state 122


state 92

    (35) createStruct -> STRUCT ID attList . END
    (36) attList -> attList . SEMICOLON ID COLON COLON types SEMICOLON

    END             shift and go to state 123
    SEMICOLON       shift and go to state 124


state 93

    (27) printST -> PRINTLN LEPAR expression RIPAR .

    SEMICOLON       reduce using rule 27 (printST -> PRINTLN LEPAR expression RIPAR .)


state 94

    (28) printST -> PRINT LEPAR expression RIPAR .

    SEMICOLON       reduce using rule 28 (printST -> PRINT LEPAR expression RIPAR .)


state 95

    (29) ifST -> IF expression statement END .

    SEMICOLON       reduce using rule 29 (ifST -> IF expression statement END .)


state 96

    (30) ifST -> IF expression statement ELSE . statement END
    (19) statement -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    statement                      shift and go to state 125
    instructions                   shift and go to state 78
    instruction                    shift and go to state 3
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 97

    (31) ifST -> IF expression statement elseIfList . END

    END             shift and go to state 126


state 98

    (32) elseIfList -> ELSEIF . expression statement
    (33) elseIfList -> ELSEIF . expression statement ELSE statement
    (34) elseIfList -> ELSEIF . expression statement elseIfList
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 127
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 99

    (49) expression -> expression PLUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    PLUS            reduce using rule 49 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 49 (expression -> expression PLUS expression .)
    POT             reduce using rule 49 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 49 (expression -> expression PLUS expression .)
    LESS            reduce using rule 49 (expression -> expression PLUS expression .)
    GREATEREQUAL    reduce using rule 49 (expression -> expression PLUS expression .)
    LESSEQUAL       reduce using rule 49 (expression -> expression PLUS expression .)
    EQUALSEQUALS    reduce using rule 49 (expression -> expression PLUS expression .)
    DISTINT         reduce using rule 49 (expression -> expression PLUS expression .)
    OR              reduce using rule 49 (expression -> expression PLUS expression .)
    AND             reduce using rule 49 (expression -> expression PLUS expression .)
    PRINTLN         reduce using rule 49 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 49 (expression -> expression PLUS expression .)
    IF              reduce using rule 49 (expression -> expression PLUS expression .)
    ID              reduce using rule 49 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 49 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 49 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 49 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 49 (expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 49 (expression -> expression PLUS expression .)
    STRUCT          reduce using rule 49 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression PLUS expression .)
    RIPAR           reduce using rule 49 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 49 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 67
    DIV             shift and go to state 68

  ! TIMES           [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 100

    (50) expression -> expression MINUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    PLUS            reduce using rule 50 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 50 (expression -> expression MINUS expression .)
    POT             reduce using rule 50 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 50 (expression -> expression MINUS expression .)
    LESS            reduce using rule 50 (expression -> expression MINUS expression .)
    GREATEREQUAL    reduce using rule 50 (expression -> expression MINUS expression .)
    LESSEQUAL       reduce using rule 50 (expression -> expression MINUS expression .)
    EQUALSEQUALS    reduce using rule 50 (expression -> expression MINUS expression .)
    DISTINT         reduce using rule 50 (expression -> expression MINUS expression .)
    OR              reduce using rule 50 (expression -> expression MINUS expression .)
    AND             reduce using rule 50 (expression -> expression MINUS expression .)
    PRINTLN         reduce using rule 50 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 50 (expression -> expression MINUS expression .)
    IF              reduce using rule 50 (expression -> expression MINUS expression .)
    ID              reduce using rule 50 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 50 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 50 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 50 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 50 (expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 50 (expression -> expression MINUS expression .)
    STRUCT          reduce using rule 50 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression MINUS expression .)
    RIPAR           reduce using rule 50 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 50 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 67
    DIV             shift and go to state 68

  ! TIMES           [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 101

    (51) expression -> expression TIMES expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    PLUS            reduce using rule 51 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 51 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 51 (expression -> expression TIMES expression .)
    DIV             reduce using rule 51 (expression -> expression TIMES expression .)
    POT             reduce using rule 51 (expression -> expression TIMES expression .)
    GREATER         reduce using rule 51 (expression -> expression TIMES expression .)
    LESS            reduce using rule 51 (expression -> expression TIMES expression .)
    GREATEREQUAL    reduce using rule 51 (expression -> expression TIMES expression .)
    LESSEQUAL       reduce using rule 51 (expression -> expression TIMES expression .)
    EQUALSEQUALS    reduce using rule 51 (expression -> expression TIMES expression .)
    DISTINT         reduce using rule 51 (expression -> expression TIMES expression .)
    OR              reduce using rule 51 (expression -> expression TIMES expression .)
    AND             reduce using rule 51 (expression -> expression TIMES expression .)
    PRINTLN         reduce using rule 51 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 51 (expression -> expression TIMES expression .)
    IF              reduce using rule 51 (expression -> expression TIMES expression .)
    ID              reduce using rule 51 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 51 (expression -> expression TIMES expression .)
    FUNCTION        reduce using rule 51 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 51 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 51 (expression -> expression TIMES expression .)
    CONTINUE        reduce using rule 51 (expression -> expression TIMES expression .)
    STRUCT          reduce using rule 51 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression TIMES expression .)
    RIPAR           reduce using rule 51 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 51 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 102

    (52) expression -> expression DIV expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    PLUS            reduce using rule 52 (expression -> expression DIV expression .)
    MINUS           reduce using rule 52 (expression -> expression DIV expression .)
    TIMES           reduce using rule 52 (expression -> expression DIV expression .)
    DIV             reduce using rule 52 (expression -> expression DIV expression .)
    POT             reduce using rule 52 (expression -> expression DIV expression .)
    GREATER         reduce using rule 52 (expression -> expression DIV expression .)
    LESS            reduce using rule 52 (expression -> expression DIV expression .)
    GREATEREQUAL    reduce using rule 52 (expression -> expression DIV expression .)
    LESSEQUAL       reduce using rule 52 (expression -> expression DIV expression .)
    EQUALSEQUALS    reduce using rule 52 (expression -> expression DIV expression .)
    DISTINT         reduce using rule 52 (expression -> expression DIV expression .)
    OR              reduce using rule 52 (expression -> expression DIV expression .)
    AND             reduce using rule 52 (expression -> expression DIV expression .)
    PRINTLN         reduce using rule 52 (expression -> expression DIV expression .)
    PRINT           reduce using rule 52 (expression -> expression DIV expression .)
    IF              reduce using rule 52 (expression -> expression DIV expression .)
    ID              reduce using rule 52 (expression -> expression DIV expression .)
    WHILE           reduce using rule 52 (expression -> expression DIV expression .)
    FUNCTION        reduce using rule 52 (expression -> expression DIV expression .)
    RETURN          reduce using rule 52 (expression -> expression DIV expression .)
    BREAK           reduce using rule 52 (expression -> expression DIV expression .)
    CONTINUE        reduce using rule 52 (expression -> expression DIV expression .)
    STRUCT          reduce using rule 52 (expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression DIV expression .)
    RIPAR           reduce using rule 52 (expression -> expression DIV expression .)
    COMMA           reduce using rule 52 (expression -> expression DIV expression .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 103

    (53) expression -> expression POT expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for POT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for EQUALSEQUALS resolved as shift
  ! shift/reduce conflict for DISTINT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    PRINTLN         reduce using rule 53 (expression -> expression POT expression .)
    PRINT           reduce using rule 53 (expression -> expression POT expression .)
    IF              reduce using rule 53 (expression -> expression POT expression .)
    ID              reduce using rule 53 (expression -> expression POT expression .)
    WHILE           reduce using rule 53 (expression -> expression POT expression .)
    FUNCTION        reduce using rule 53 (expression -> expression POT expression .)
    RETURN          reduce using rule 53 (expression -> expression POT expression .)
    BREAK           reduce using rule 53 (expression -> expression POT expression .)
    CONTINUE        reduce using rule 53 (expression -> expression POT expression .)
    STRUCT          reduce using rule 53 (expression -> expression POT expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression POT expression .)
    RIPAR           reduce using rule 53 (expression -> expression POT expression .)
    COMMA           reduce using rule 53 (expression -> expression POT expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77

  ! PLUS            [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! DIV             [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! POT             [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! GREATER         [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! LESS            [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! GREATEREQUAL    [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! LESSEQUAL       [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! EQUALSEQUALS    [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! DISTINT         [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! OR              [ reduce using rule 53 (expression -> expression POT expression .) ]
  ! AND             [ reduce using rule 53 (expression -> expression POT expression .) ]


state 104

    (54) expression -> expression GREATER expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    POT             reduce using rule 54 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 54 (expression -> expression GREATER expression .)
    LESS            reduce using rule 54 (expression -> expression GREATER expression .)
    GREATEREQUAL    reduce using rule 54 (expression -> expression GREATER expression .)
    LESSEQUAL       reduce using rule 54 (expression -> expression GREATER expression .)
    EQUALSEQUALS    reduce using rule 54 (expression -> expression GREATER expression .)
    DISTINT         reduce using rule 54 (expression -> expression GREATER expression .)
    OR              reduce using rule 54 (expression -> expression GREATER expression .)
    AND             reduce using rule 54 (expression -> expression GREATER expression .)
    PRINTLN         reduce using rule 54 (expression -> expression GREATER expression .)
    PRINT           reduce using rule 54 (expression -> expression GREATER expression .)
    IF              reduce using rule 54 (expression -> expression GREATER expression .)
    ID              reduce using rule 54 (expression -> expression GREATER expression .)
    WHILE           reduce using rule 54 (expression -> expression GREATER expression .)
    FUNCTION        reduce using rule 54 (expression -> expression GREATER expression .)
    RETURN          reduce using rule 54 (expression -> expression GREATER expression .)
    BREAK           reduce using rule 54 (expression -> expression GREATER expression .)
    CONTINUE        reduce using rule 54 (expression -> expression GREATER expression .)
    STRUCT          reduce using rule 54 (expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression GREATER expression .)
    RIPAR           reduce using rule 54 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 54 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! DIV             [ reduce using rule 54 (expression -> expression GREATER expression .) ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 105

    (55) expression -> expression LESS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    POT             reduce using rule 55 (expression -> expression LESS expression .)
    GREATER         reduce using rule 55 (expression -> expression LESS expression .)
    LESS            reduce using rule 55 (expression -> expression LESS expression .)
    GREATEREQUAL    reduce using rule 55 (expression -> expression LESS expression .)
    LESSEQUAL       reduce using rule 55 (expression -> expression LESS expression .)
    EQUALSEQUALS    reduce using rule 55 (expression -> expression LESS expression .)
    DISTINT         reduce using rule 55 (expression -> expression LESS expression .)
    OR              reduce using rule 55 (expression -> expression LESS expression .)
    AND             reduce using rule 55 (expression -> expression LESS expression .)
    PRINTLN         reduce using rule 55 (expression -> expression LESS expression .)
    PRINT           reduce using rule 55 (expression -> expression LESS expression .)
    IF              reduce using rule 55 (expression -> expression LESS expression .)
    ID              reduce using rule 55 (expression -> expression LESS expression .)
    WHILE           reduce using rule 55 (expression -> expression LESS expression .)
    FUNCTION        reduce using rule 55 (expression -> expression LESS expression .)
    RETURN          reduce using rule 55 (expression -> expression LESS expression .)
    BREAK           reduce using rule 55 (expression -> expression LESS expression .)
    CONTINUE        reduce using rule 55 (expression -> expression LESS expression .)
    STRUCT          reduce using rule 55 (expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression LESS expression .)
    RIPAR           reduce using rule 55 (expression -> expression LESS expression .)
    COMMA           reduce using rule 55 (expression -> expression LESS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 55 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression LESS expression .) ]
  ! DIV             [ reduce using rule 55 (expression -> expression LESS expression .) ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 106

    (56) expression -> expression GREATEREQUAL expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    POT             reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    GREATER         reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    LESS            reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    GREATEREQUAL    reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    LESSEQUAL       reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    EQUALSEQUALS    reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    DISTINT         reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    OR              reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    AND             reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    PRINTLN         reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    PRINT           reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    IF              reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    ID              reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    WHILE           reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    FUNCTION        reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    RETURN          reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    BREAK           reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    CONTINUE        reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    STRUCT          reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    RIPAR           reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    COMMA           reduce using rule 56 (expression -> expression GREATEREQUAL expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 56 (expression -> expression GREATEREQUAL expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression GREATEREQUAL expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression GREATEREQUAL expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression GREATEREQUAL expression .) ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 107

    (57) expression -> expression LESSEQUAL expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    POT             reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    GREATER         reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    LESS            reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    GREATEREQUAL    reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    LESSEQUAL       reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    EQUALSEQUALS    reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    DISTINT         reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    OR              reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    AND             reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    PRINTLN         reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    PRINT           reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    IF              reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    ID              reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    WHILE           reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    FUNCTION        reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    RETURN          reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    BREAK           reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    CONTINUE        reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    STRUCT          reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    RIPAR           reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    COMMA           reduce using rule 57 (expression -> expression LESSEQUAL expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 57 (expression -> expression LESSEQUAL expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression LESSEQUAL expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression LESSEQUAL expression .) ]
  ! DIV             [ reduce using rule 57 (expression -> expression LESSEQUAL expression .) ]
  ! POT             [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATEREQUAL    [ shift and go to state 72 ]
  ! LESSEQUAL       [ shift and go to state 73 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 108

    (58) expression -> expression EQUALSEQUALS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    POT             reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    EQUALSEQUALS    reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    DISTINT         reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    OR              reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    AND             reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    PRINTLN         reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    PRINT           reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    IF              reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    ID              reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    WHILE           reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    FUNCTION        reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    RETURN          reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    BREAK           reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    CONTINUE        reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    STRUCT          reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    RIPAR           reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    COMMA           reduce using rule 58 (expression -> expression EQUALSEQUALS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73

  ! PLUS            [ reduce using rule 58 (expression -> expression EQUALSEQUALS expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression EQUALSEQUALS expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression EQUALSEQUALS expression .) ]
  ! DIV             [ reduce using rule 58 (expression -> expression EQUALSEQUALS expression .) ]
  ! GREATER         [ reduce using rule 58 (expression -> expression EQUALSEQUALS expression .) ]
  ! LESS            [ reduce using rule 58 (expression -> expression EQUALSEQUALS expression .) ]
  ! GREATEREQUAL    [ reduce using rule 58 (expression -> expression EQUALSEQUALS expression .) ]
  ! LESSEQUAL       [ reduce using rule 58 (expression -> expression EQUALSEQUALS expression .) ]
  ! POT             [ shift and go to state 69 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 109

    (59) expression -> expression DISTINT expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    POT             reduce using rule 59 (expression -> expression DISTINT expression .)
    EQUALSEQUALS    reduce using rule 59 (expression -> expression DISTINT expression .)
    DISTINT         reduce using rule 59 (expression -> expression DISTINT expression .)
    OR              reduce using rule 59 (expression -> expression DISTINT expression .)
    AND             reduce using rule 59 (expression -> expression DISTINT expression .)
    PRINTLN         reduce using rule 59 (expression -> expression DISTINT expression .)
    PRINT           reduce using rule 59 (expression -> expression DISTINT expression .)
    IF              reduce using rule 59 (expression -> expression DISTINT expression .)
    ID              reduce using rule 59 (expression -> expression DISTINT expression .)
    WHILE           reduce using rule 59 (expression -> expression DISTINT expression .)
    FUNCTION        reduce using rule 59 (expression -> expression DISTINT expression .)
    RETURN          reduce using rule 59 (expression -> expression DISTINT expression .)
    BREAK           reduce using rule 59 (expression -> expression DISTINT expression .)
    CONTINUE        reduce using rule 59 (expression -> expression DISTINT expression .)
    STRUCT          reduce using rule 59 (expression -> expression DISTINT expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression DISTINT expression .)
    RIPAR           reduce using rule 59 (expression -> expression DISTINT expression .)
    COMMA           reduce using rule 59 (expression -> expression DISTINT expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73

  ! PLUS            [ reduce using rule 59 (expression -> expression DISTINT expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression DISTINT expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression DISTINT expression .) ]
  ! DIV             [ reduce using rule 59 (expression -> expression DISTINT expression .) ]
  ! GREATER         [ reduce using rule 59 (expression -> expression DISTINT expression .) ]
  ! LESS            [ reduce using rule 59 (expression -> expression DISTINT expression .) ]
  ! GREATEREQUAL    [ reduce using rule 59 (expression -> expression DISTINT expression .) ]
  ! LESSEQUAL       [ reduce using rule 59 (expression -> expression DISTINT expression .) ]
  ! POT             [ shift and go to state 69 ]
  ! EQUALSEQUALS    [ shift and go to state 74 ]
  ! DISTINT         [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 110

    (60) expression -> expression OR expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    POT             reduce using rule 60 (expression -> expression OR expression .)
    OR              reduce using rule 60 (expression -> expression OR expression .)
    PRINTLN         reduce using rule 60 (expression -> expression OR expression .)
    PRINT           reduce using rule 60 (expression -> expression OR expression .)
    IF              reduce using rule 60 (expression -> expression OR expression .)
    ID              reduce using rule 60 (expression -> expression OR expression .)
    WHILE           reduce using rule 60 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 60 (expression -> expression OR expression .)
    RETURN          reduce using rule 60 (expression -> expression OR expression .)
    BREAK           reduce using rule 60 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 60 (expression -> expression OR expression .)
    STRUCT          reduce using rule 60 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression OR expression .)
    RIPAR           reduce using rule 60 (expression -> expression OR expression .)
    COMMA           reduce using rule 60 (expression -> expression OR expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    AND             shift and go to state 77

  ! PLUS            [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! GREATEREQUAL    [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! LESSEQUAL       [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! EQUALSEQUALS    [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! DISTINT         [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! POT             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 76 ]


state 111

    (61) expression -> expression AND expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    POT             reduce using rule 61 (expression -> expression AND expression .)
    OR              reduce using rule 61 (expression -> expression AND expression .)
    AND             reduce using rule 61 (expression -> expression AND expression .)
    PRINTLN         reduce using rule 61 (expression -> expression AND expression .)
    PRINT           reduce using rule 61 (expression -> expression AND expression .)
    IF              reduce using rule 61 (expression -> expression AND expression .)
    ID              reduce using rule 61 (expression -> expression AND expression .)
    WHILE           reduce using rule 61 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 61 (expression -> expression AND expression .)
    RETURN          reduce using rule 61 (expression -> expression AND expression .)
    BREAK           reduce using rule 61 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 61 (expression -> expression AND expression .)
    STRUCT          reduce using rule 61 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression AND expression .)
    RIPAR           reduce using rule 61 (expression -> expression AND expression .)
    COMMA           reduce using rule 61 (expression -> expression AND expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75

  ! PLUS            [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! GREATEREQUAL    [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! LESSEQUAL       [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! EQUALSEQUALS    [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! DISTINT         [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! POT             [ shift and go to state 69 ]
  ! OR              [ shift and go to state 76 ]
  ! AND             [ shift and go to state 77 ]


state 112

    (63) finalExp -> LEPAR expression RIPAR .

    PLUS            reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    MINUS           reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    TIMES           reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    DIV             reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    POT             reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    GREATER         reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    LESS            reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    GREATEREQUAL    reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    LESSEQUAL       reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    EQUALSEQUALS    reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    DISTINT         reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    OR              reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    AND             reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    PRINTLN         reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    PRINT           reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    IF              reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    ID              reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    WHILE           reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    FUNCTION        reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    RETURN          reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    BREAK           reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    CONTINUE        reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    STRUCT          reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    SEMICOLON       reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    RIPAR           reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)
    COMMA           reduce using rule 63 (finalExp -> LEPAR expression RIPAR .)


state 113

    (72) accessST -> ID POINT ID .

    PLUS            reduce using rule 72 (accessST -> ID POINT ID .)
    MINUS           reduce using rule 72 (accessST -> ID POINT ID .)
    TIMES           reduce using rule 72 (accessST -> ID POINT ID .)
    DIV             reduce using rule 72 (accessST -> ID POINT ID .)
    POT             reduce using rule 72 (accessST -> ID POINT ID .)
    GREATER         reduce using rule 72 (accessST -> ID POINT ID .)
    LESS            reduce using rule 72 (accessST -> ID POINT ID .)
    GREATEREQUAL    reduce using rule 72 (accessST -> ID POINT ID .)
    LESSEQUAL       reduce using rule 72 (accessST -> ID POINT ID .)
    EQUALSEQUALS    reduce using rule 72 (accessST -> ID POINT ID .)
    DISTINT         reduce using rule 72 (accessST -> ID POINT ID .)
    OR              reduce using rule 72 (accessST -> ID POINT ID .)
    AND             reduce using rule 72 (accessST -> ID POINT ID .)
    PRINTLN         reduce using rule 72 (accessST -> ID POINT ID .)
    PRINT           reduce using rule 72 (accessST -> ID POINT ID .)
    IF              reduce using rule 72 (accessST -> ID POINT ID .)
    ID              reduce using rule 72 (accessST -> ID POINT ID .)
    WHILE           reduce using rule 72 (accessST -> ID POINT ID .)
    FUNCTION        reduce using rule 72 (accessST -> ID POINT ID .)
    RETURN          reduce using rule 72 (accessST -> ID POINT ID .)
    BREAK           reduce using rule 72 (accessST -> ID POINT ID .)
    CONTINUE        reduce using rule 72 (accessST -> ID POINT ID .)
    STRUCT          reduce using rule 72 (accessST -> ID POINT ID .)
    SEMICOLON       reduce using rule 72 (accessST -> ID POINT ID .)
    RIPAR           reduce using rule 72 (accessST -> ID POINT ID .)
    COMMA           reduce using rule 72 (accessST -> ID POINT ID .)


state 114

    (44) callFunc -> ID LEPAR expList RIPAR .

    SEMICOLON       reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    PLUS            reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    MINUS           reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    TIMES           reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    DIV             reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    POT             reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    GREATER         reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    LESS            reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    GREATEREQUAL    reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    LESSEQUAL       reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    EQUALSEQUALS    reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    DISTINT         reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    OR              reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    AND             reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    PRINTLN         reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    PRINT           reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    IF              reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    ID              reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    WHILE           reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    FUNCTION        reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    RETURN          reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    BREAK           reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    CONTINUE        reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    STRUCT          reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    RIPAR           reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)
    COMMA           reduce using rule 44 (callFunc -> ID LEPAR expList RIPAR .)


state 115

    (45) expList -> expList COMMA . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 128
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 116

    (38) declareStructST -> ID COLON COLON ID .

    SEMICOLON       reduce using rule 38 (declareStructST -> ID COLON COLON ID .)


state 117

    (39) assignAccessST -> ID POINT ID EQUALS . expression
    (47) expression -> . MINUS expression
    (48) expression -> . NOT expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression TIMES expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression POT expression
    (54) expression -> . expression GREATER expression
    (55) expression -> . expression LESS expression
    (56) expression -> . expression GREATEREQUAL expression
    (57) expression -> . expression LESSEQUAL expression
    (58) expression -> . expression EQUALSEQUALS expression
    (59) expression -> . expression DISTINT expression
    (60) expression -> . expression OR expression
    (61) expression -> . expression AND expression
    (62) expression -> . finalExp
    (63) finalExp -> . LEPAR expression RIPAR
    (64) finalExp -> . INTLITERAL
    (65) finalExp -> . FLOATLITERAL
    (66) finalExp -> . STRINGLITERAL
    (67) finalExp -> . TRUE
    (68) finalExp -> . FALSE
    (69) finalExp -> . ID
    (70) finalExp -> . callFunc
    (71) finalExp -> . accessST
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (72) accessST -> . ID POINT ID

    MINUS           shift and go to state 42
    NOT             shift and go to state 43
    LEPAR           shift and go to state 45
    INTLITERAL      shift and go to state 46
    FLOATLITERAL    shift and go to state 47
    STRINGLITERAL   shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    ID              shift and go to state 51

    expression                     shift and go to state 129
    finalExp                       shift and go to state 44
    callFunc                       shift and go to state 52
    accessST                       shift and go to state 53

state 118

    (40) whileST -> WHILE expression statement END .

    SEMICOLON       reduce using rule 40 (whileST -> WHILE expression statement END .)


state 119

    (23) decParams -> ID . COLON COLON types

    COLON           shift and go to state 130


state 120

    (20) declareFunc -> FUNCTION ID LEPAR RIPAR . COLON COLON types statement END

    COLON           shift and go to state 131


state 121

    (21) declareFunc -> FUNCTION ID LEPAR decParams . RIPAR COLON COLON types statement END
    (22) decParams -> decParams . COMMA ID COLON COLON types

    RIPAR           shift and go to state 132
    COMMA           shift and go to state 133


state 122

    (37) attList -> ID COLON . COLON types

    COLON           shift and go to state 134


state 123

    (35) createStruct -> STRUCT ID attList END .

    SEMICOLON       reduce using rule 35 (createStruct -> STRUCT ID attList END .)


state 124

    (36) attList -> attList SEMICOLON . ID COLON COLON types SEMICOLON

    ID              shift and go to state 135


state 125

    (30) ifST -> IF expression statement ELSE statement . END

    END             shift and go to state 136


state 126

    (31) ifST -> IF expression statement elseIfList END .

    SEMICOLON       reduce using rule 31 (ifST -> IF expression statement elseIfList END .)


state 127

    (32) elseIfList -> ELSEIF expression . statement
    (33) elseIfList -> ELSEIF expression . statement ELSE statement
    (34) elseIfList -> ELSEIF expression . statement elseIfList
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression
    (19) statement -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77
    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    statement                      shift and go to state 137
    instructions                   shift and go to state 78
    instruction                    shift and go to state 3
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 128

    (45) expList -> expList COMMA expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    RIPAR           reduce using rule 45 (expList -> expList COMMA expression .)
    COMMA           reduce using rule 45 (expList -> expList COMMA expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77


state 129

    (39) assignAccessST -> ID POINT ID EQUALS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . TIMES expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . POT expression
    (54) expression -> expression . GREATER expression
    (55) expression -> expression . LESS expression
    (56) expression -> expression . GREATEREQUAL expression
    (57) expression -> expression . LESSEQUAL expression
    (58) expression -> expression . EQUALSEQUALS expression
    (59) expression -> expression . DISTINT expression
    (60) expression -> expression . OR expression
    (61) expression -> expression . AND expression

    SEMICOLON       reduce using rule 39 (assignAccessST -> ID POINT ID EQUALS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    POT             shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEQUAL       shift and go to state 73
    EQUALSEQUALS    shift and go to state 74
    DISTINT         shift and go to state 75
    OR              shift and go to state 76
    AND             shift and go to state 77


state 130

    (23) decParams -> ID COLON . COLON types

    COLON           shift and go to state 138


state 131

    (20) declareFunc -> FUNCTION ID LEPAR RIPAR COLON . COLON types statement END

    COLON           shift and go to state 139


state 132

    (21) declareFunc -> FUNCTION ID LEPAR decParams RIPAR . COLON COLON types statement END

    COLON           shift and go to state 140


state 133

    (22) decParams -> decParams COMMA . ID COLON COLON types

    ID              shift and go to state 141


state 134

    (37) attList -> ID COLON COLON . types
    (16) types -> . INT64
    (17) types -> . STRING
    (18) types -> . BOOL

    INT64           shift and go to state 143
    STRING          shift and go to state 144
    BOOL            shift and go to state 145

    types                          shift and go to state 142

state 135

    (36) attList -> attList SEMICOLON ID . COLON COLON types SEMICOLON

    COLON           shift and go to state 146


state 136

    (30) ifST -> IF expression statement ELSE statement END .

    SEMICOLON       reduce using rule 30 (ifST -> IF expression statement ELSE statement END .)


state 137

    (32) elseIfList -> ELSEIF expression statement .
    (33) elseIfList -> ELSEIF expression statement . ELSE statement
    (34) elseIfList -> ELSEIF expression statement . elseIfList
    (32) elseIfList -> . ELSEIF expression statement
    (33) elseIfList -> . ELSEIF expression statement ELSE statement
    (34) elseIfList -> . ELSEIF expression statement elseIfList

    END             reduce using rule 32 (elseIfList -> ELSEIF expression statement .)
    ELSE            shift and go to state 147
    ELSEIF          shift and go to state 98

    elseIfList                     shift and go to state 148

state 138

    (23) decParams -> ID COLON COLON . types
    (16) types -> . INT64
    (17) types -> . STRING
    (18) types -> . BOOL

    INT64           shift and go to state 143
    STRING          shift and go to state 144
    BOOL            shift and go to state 145

    types                          shift and go to state 149

state 139

    (20) declareFunc -> FUNCTION ID LEPAR RIPAR COLON COLON . types statement END
    (16) types -> . INT64
    (17) types -> . STRING
    (18) types -> . BOOL

    INT64           shift and go to state 143
    STRING          shift and go to state 144
    BOOL            shift and go to state 145

    types                          shift and go to state 150

state 140

    (21) declareFunc -> FUNCTION ID LEPAR decParams RIPAR COLON . COLON types statement END

    COLON           shift and go to state 151


state 141

    (22) decParams -> decParams COMMA ID . COLON COLON types

    COLON           shift and go to state 152


state 142

    (37) attList -> ID COLON COLON types .

    END             reduce using rule 37 (attList -> ID COLON COLON types .)
    SEMICOLON       reduce using rule 37 (attList -> ID COLON COLON types .)


state 143

    (16) types -> INT64 .

    END             reduce using rule 16 (types -> INT64 .)
    SEMICOLON       reduce using rule 16 (types -> INT64 .)
    RIPAR           reduce using rule 16 (types -> INT64 .)
    COMMA           reduce using rule 16 (types -> INT64 .)
    PRINTLN         reduce using rule 16 (types -> INT64 .)
    PRINT           reduce using rule 16 (types -> INT64 .)
    IF              reduce using rule 16 (types -> INT64 .)
    ID              reduce using rule 16 (types -> INT64 .)
    WHILE           reduce using rule 16 (types -> INT64 .)
    FUNCTION        reduce using rule 16 (types -> INT64 .)
    RETURN          reduce using rule 16 (types -> INT64 .)
    BREAK           reduce using rule 16 (types -> INT64 .)
    CONTINUE        reduce using rule 16 (types -> INT64 .)
    STRUCT          reduce using rule 16 (types -> INT64 .)


state 144

    (17) types -> STRING .

    END             reduce using rule 17 (types -> STRING .)
    SEMICOLON       reduce using rule 17 (types -> STRING .)
    RIPAR           reduce using rule 17 (types -> STRING .)
    COMMA           reduce using rule 17 (types -> STRING .)
    PRINTLN         reduce using rule 17 (types -> STRING .)
    PRINT           reduce using rule 17 (types -> STRING .)
    IF              reduce using rule 17 (types -> STRING .)
    ID              reduce using rule 17 (types -> STRING .)
    WHILE           reduce using rule 17 (types -> STRING .)
    FUNCTION        reduce using rule 17 (types -> STRING .)
    RETURN          reduce using rule 17 (types -> STRING .)
    BREAK           reduce using rule 17 (types -> STRING .)
    CONTINUE        reduce using rule 17 (types -> STRING .)
    STRUCT          reduce using rule 17 (types -> STRING .)


state 145

    (18) types -> BOOL .

    END             reduce using rule 18 (types -> BOOL .)
    SEMICOLON       reduce using rule 18 (types -> BOOL .)
    RIPAR           reduce using rule 18 (types -> BOOL .)
    COMMA           reduce using rule 18 (types -> BOOL .)
    PRINTLN         reduce using rule 18 (types -> BOOL .)
    PRINT           reduce using rule 18 (types -> BOOL .)
    IF              reduce using rule 18 (types -> BOOL .)
    ID              reduce using rule 18 (types -> BOOL .)
    WHILE           reduce using rule 18 (types -> BOOL .)
    FUNCTION        reduce using rule 18 (types -> BOOL .)
    RETURN          reduce using rule 18 (types -> BOOL .)
    BREAK           reduce using rule 18 (types -> BOOL .)
    CONTINUE        reduce using rule 18 (types -> BOOL .)
    STRUCT          reduce using rule 18 (types -> BOOL .)


state 146

    (36) attList -> attList SEMICOLON ID COLON . COLON types SEMICOLON

    COLON           shift and go to state 153


state 147

    (33) elseIfList -> ELSEIF expression statement ELSE . statement
    (19) statement -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    statement                      shift and go to state 154
    instructions                   shift and go to state 78
    instruction                    shift and go to state 3
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 148

    (34) elseIfList -> ELSEIF expression statement elseIfList .

    END             reduce using rule 34 (elseIfList -> ELSEIF expression statement elseIfList .)


state 149

    (23) decParams -> ID COLON COLON types .

    RIPAR           reduce using rule 23 (decParams -> ID COLON COLON types .)
    COMMA           reduce using rule 23 (decParams -> ID COLON COLON types .)


state 150

    (20) declareFunc -> FUNCTION ID LEPAR RIPAR COLON COLON types . statement END
    (19) statement -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    statement                      shift and go to state 155
    instructions                   shift and go to state 78
    instruction                    shift and go to state 3
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 151

    (21) declareFunc -> FUNCTION ID LEPAR decParams RIPAR COLON COLON . types statement END
    (16) types -> . INT64
    (17) types -> . STRING
    (18) types -> . BOOL

    INT64           shift and go to state 143
    STRING          shift and go to state 144
    BOOL            shift and go to state 145

    types                          shift and go to state 156

state 152

    (22) decParams -> decParams COMMA ID COLON . COLON types

    COLON           shift and go to state 157


state 153

    (36) attList -> attList SEMICOLON ID COLON COLON . types SEMICOLON
    (16) types -> . INT64
    (17) types -> . STRING
    (18) types -> . BOOL

    INT64           shift and go to state 143
    STRING          shift and go to state 144
    BOOL            shift and go to state 145

    types                          shift and go to state 158

state 154

    (33) elseIfList -> ELSEIF expression statement ELSE statement .

    END             reduce using rule 33 (elseIfList -> ELSEIF expression statement ELSE statement .)


state 155

    (20) declareFunc -> FUNCTION ID LEPAR RIPAR COLON COLON types statement . END

    END             shift and go to state 159


state 156

    (21) declareFunc -> FUNCTION ID LEPAR decParams RIPAR COLON COLON types . statement END
    (19) statement -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . printST SEMICOLON
    (5) instruction -> . ifST SEMICOLON
    (6) instruction -> . declarationST SEMICOLON
    (7) instruction -> . whileST SEMICOLON
    (8) instruction -> . callFunc SEMICOLON
    (9) instruction -> . declareFunc SEMICOLON
    (10) instruction -> . returnST SEMICOLON
    (11) instruction -> . breakST SEMICOLON
    (12) instruction -> . continueST SEMICOLON
    (13) instruction -> . createStruct SEMICOLON
    (14) instruction -> . declareStructST SEMICOLON
    (15) instruction -> . assignAccessST SEMICOLON
    (27) printST -> . PRINTLN LEPAR expression RIPAR
    (28) printST -> . PRINT LEPAR expression RIPAR
    (29) ifST -> . IF expression statement END
    (30) ifST -> . IF expression statement ELSE statement END
    (31) ifST -> . IF expression statement elseIfList END
    (26) declarationST -> . ID EQUALS expression
    (40) whileST -> . WHILE expression statement END
    (43) callFunc -> . ID LEPAR RIPAR
    (44) callFunc -> . ID LEPAR expList RIPAR
    (20) declareFunc -> . FUNCTION ID LEPAR RIPAR COLON COLON types statement END
    (21) declareFunc -> . FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END
    (24) returnST -> . RETURN
    (25) returnST -> . RETURN expression
    (41) breakST -> . BREAK
    (42) continueST -> . CONTINUE
    (35) createStruct -> . STRUCT ID attList END
    (38) declareStructST -> . ID COLON COLON ID
    (39) assignAccessST -> . ID POINT ID EQUALS expression

    PRINTLN         shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    WHILE           shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    STRUCT          shift and go to state 25

    statement                      shift and go to state 160
    instructions                   shift and go to state 78
    instruction                    shift and go to state 3
    printST                        shift and go to state 4
    ifST                           shift and go to state 5
    declarationST                  shift and go to state 6
    whileST                        shift and go to state 7
    callFunc                       shift and go to state 8
    declareFunc                    shift and go to state 9
    returnST                       shift and go to state 10
    breakST                        shift and go to state 11
    continueST                     shift and go to state 12
    createStruct                   shift and go to state 13
    declareStructST                shift and go to state 14
    assignAccessST                 shift and go to state 15

state 157

    (22) decParams -> decParams COMMA ID COLON COLON . types
    (16) types -> . INT64
    (17) types -> . STRING
    (18) types -> . BOOL

    INT64           shift and go to state 143
    STRING          shift and go to state 144
    BOOL            shift and go to state 145

    types                          shift and go to state 161

state 158

    (36) attList -> attList SEMICOLON ID COLON COLON types . SEMICOLON

    SEMICOLON       shift and go to state 162


state 159

    (20) declareFunc -> FUNCTION ID LEPAR RIPAR COLON COLON types statement END .

    SEMICOLON       reduce using rule 20 (declareFunc -> FUNCTION ID LEPAR RIPAR COLON COLON types statement END .)


state 160

    (21) declareFunc -> FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement . END

    END             shift and go to state 163


state 161

    (22) decParams -> decParams COMMA ID COLON COLON types .

    RIPAR           reduce using rule 22 (decParams -> decParams COMMA ID COLON COLON types .)
    COMMA           reduce using rule 22 (decParams -> decParams COMMA ID COLON COLON types .)


state 162

    (36) attList -> attList SEMICOLON ID COLON COLON types SEMICOLON .

    END             reduce using rule 36 (attList -> attList SEMICOLON ID COLON COLON types SEMICOLON .)
    SEMICOLON       reduce using rule 36 (attList -> attList SEMICOLON ID COLON COLON types SEMICOLON .)


state 163

    (21) declareFunc -> FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END .

    SEMICOLON       reduce using rule 21 (declareFunc -> FUNCTION ID LEPAR decParams RIPAR COLON COLON types statement END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for DIV in state 103 resolved as shift
WARNING: shift/reduce conflict for POT in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUALSEQUALS in state 103 resolved as shift
WARNING: shift/reduce conflict for DISTINT in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
